openapi: "3.0.1"
info:
  title: "Coffee Delivery Service"
  description: "Distributed coffee preparation and delivery service. Service is broken\
    \ up into multi microservices that are responsible for discrete units of functionality\
    \ within the application."
  version: "v0.0.1"
servers:
- url: "https://gj0t3k4eb0.execute-api.us-east-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "test"
paths:
  /login:
    post:
      tags:
      - Login
      summary: Log in to the service
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInformation"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInformation"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-login-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /upload:
    put:
      tags:
      - Pictures
      summary: Upload a picture to S3
      operationId: "uploadPhoto"
      requestBody:
        required: true
        content:
          image/jpg:
            schema:
              $ref: "#/components/schemas/RawImage"
          image/png:
            schema:
              $ref: "#/components/schemas/RawImage"
          image/jpeg:
            schema:
              $ref: "#/components/schemas/RawImage"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Expose-Headers:
              schema:
                type: "string"
            Photo-Bucket:
              schema:
                type: "string"
            Photo-Url:
              schema:
                type: "string"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                type: "string"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                type: "string"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ ApiS3ExecutionRole, Arn ]
        httpMethod: "PUT"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:s3:path/${PhotosBucket}/{objectKey}
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Expose-Headers: "'*, Photo-Url, Photo-Bucket'"
              method.response.header.Photo-Bucket:
                Fn::Sub: "'${PhotosBucket}'"
              method.response.header.Photo-Url: "context.requestId"
        requestParameters:
          integration.request.path.objectKey: "context.requestId"
        passthroughBehavior: "when_no_templates"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /deliveries/available:
    get:
      tags:
      - Delivery Service
      summary: Get all orders available for delivery pickup
      operationId: "getAvailableDeliveries"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfDeliveryOrder"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /orders/{id}:
    get:
      tags:
      - Orders Service
      summary: Get an order by ID
      description: Access control for the order will be enforced via the user context
      operationId: "getOrder"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-orders-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /deliveries/{id}:
    get:
      tags:
      - Delivery Service
      summary: Get a delivery order
      description: User context must be the deliverer assigned to the order
      operationId: "getDelivery"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryOrder"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /deliveries/{id}/status:
    post:
      tags:
      - Delivery Service
      summary: Update an order's delivery status
      description: User context must be the deliverer assigned to the order
      operationId: "updateDeliveryStatus"
      parameters:
      - name: "newStatus"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /deliveries/{id}/secure:
    post:
      tags:
      - Delivery Service
      summary: Secure an order for delivery pickup
      description: Uses the user context to determine which deliverer the order will
        be assigned to
      operationId: "secureDelivery"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /pending-orders/{id}:
    get:
      tags:
      - Pending Order Service
      summary: Get a pending order's details
      description: User context must be the shop assigned to the order
      operationId: "getPendingOrder"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PendingOrder"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-pending-orders-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /pending-orders/{id}/secure:
    post:
      tags:
      - Pending Order Service
      summary: Secure an order for preparation
      description: Uses the user context to determine which shop the order will be
        assigned to
      operationId: "securePendingOrder"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-pending-orders-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /products:
    get:
      tags:
      - Product Service
      summary: Get all products in the system
      operationId: "getProducts"
      parameters:
      - name: "includeDisabled"
        in: "query"
        schema:
          type: "string"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfProduct"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-products-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    post:
      tags:
      - Product Service
      summary: Add or update a product in the system
      description: User context used to enforce admin access to the system
      operationId: "upsertProduct"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-products-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /pending-orders:
    get:
      tags:
      - Pending Order Service
      summary: Get all orders prepared by the current shop
      operationId: "getHistoricalOrdersPrepared"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfPendingOrder"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-pending-orders-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /orders:
    get:
      tags:
      - Orders Service
      summary: Get all orders from the current user's history
      operationId: "getOrderHistory"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfOrder"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-orders-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - Orders Service
      summary: Submit a new order
      operationId: "submitOrder"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrder"
        required: true
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-orders-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /pending-orders/{id}/status:
    post:
      tags:
      - Pending Order Service
      summary: Update in-preparation order's status
      description: User context must be the shop assigned to the order
      operationId: "updatePendingOrderStatus"
      parameters:
      - name: "newStatus"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-pending-orders-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /pending-orders/available:
    get:
      tags:
      - Pending Order Service
      summary: Get all orders available for preparation
      operationId: "getAvailablePendingOrders"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfPendingOrder"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-pending-orders-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /orders/{id}/ratings:
    get:
      tags:
      - Orders Service
      summary: Get all ratings for an order
      description: Access control for the order will be enforced via the user context
      operationId: "getOrderRatings"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfOrderRating"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    put:
      tags:
      - Orders Service
      summary: Rate an item in an order
      description: Access control for the order will be enforced via the user context
      operationId: "rateOrderItem"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRating"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /deliveries:
    get:
      tags:
      - Delivery Service
      summary: Get all historical deliveries for the current user
      operationId: "getHistoricalDeliveries"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfDeliveryOrder"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /favorites:
    get:
      tags:
      - Favorites Service
      summary: Get all favorites for the current user
      operationId: "getFavorites"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfFavoriteOrder"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      tags:
      - Favorites Service
      summary: Add or update a favorite order
      description: User context must own the favorite being updated
      operationId: "saveFavorite"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoriteOrder"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteOrder"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /products/additions:
    get:
      tags:
      - Product Service
      summary: Get all product additions in the system
      operationId: "getProductAdditions"
      parameters:
      - name: "includeDisabled"
        in: "query"
        schema:
          type: "string"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfProductAddition"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-product-additions-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      tags:
      - Product Service
      summary: Add or update a product addition in the system
      description: User context used to enforce admin access to the system
      operationId: "upsertProductAddition"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductAddition"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAddition"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        credentials:
          Fn::GetAtt: [ ApiLambdaExecutionRole, Arn ]
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:coffee-delivery-product-additions-${ResourceSuffix}/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /shop-settings:
    get:
      tags:
      - Shop Owner Service
      summary: Get the current shop's settings
      description: User context used to determine current shop
      operationId: "getShopSettings"
      responses:
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShopSettings"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    post:
      tags:
      - Shop Owner Service
      summary: Update the current shop's settings
      description: User context used to determine which shop to update
      operationId: "updateShopSettings"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShopSettings"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    RawObject:
      type: "object"
    ArrayOfProduct:
      type: "array"
      items:
        $ref: "#/components/schemas/Product"
    Order:
      required:
      - "deliveryLocation"
      - "deliveryTime"
      - "items"
      - "payment"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          description: "ID for the order"
        orderStatus:
          type: "string"
          readOnly: true
          description: "Status of an order"
          enum:
          - "RECEIVED"
          - "BREWING"
          - "MADE"
          - "PICKED_UP"
          - "DELIVERED"
        deliveryTime:
          type: "string"
          description: "When the order is scheduled for delivery"
          format: "date-time"
        preparedLocation:
          $ref: "#/components/schemas/Location"
        deliveryLocation:
          $ref: "#/components/schemas/Location"
        deliveredBy:
          type: "string"
          readOnly: true
          description: "Who delivered the order"
        payment:
          $ref: "#/components/schemas/PaymentInformation"
        items:
          type: "array"
          description: "Items in the order"
          items:
            $ref: "#/components/schemas/OrderItem"
      description: "Order information"
    ArrayOfFavoriteOrder:
      type: "array"
      items:
        $ref: "#/components/schemas/FavoriteOrder"
    ArrayOfPendingOrder:
      type: "array"
      items:
        $ref: "#/components/schemas/PendingOrder"
    FavoriteOrder:
      required:
      - "items"
      - "name"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          description: "ID for the saved order"
        name:
          type: "string"
          description: "Name for the saved order"
        items:
          type: "array"
          description: "Items composing the saved order"
          items:
            $ref: "#/components/schemas/OrderItem"
      description: "Favorite order definition, including an ID to update an existing\
        \ favorite"
    CreateOrder:
      required:
      - "deliveryLocation"
      - "deliveryTime"
      - "items"
      - "payment"
      type: "object"
      properties:
        deliveryTime:
          type: "string"
          description: "When the order is requested for delivery"
          format: "date-time"
        deliveryLocation:
          $ref: "#/components/schemas/Location"
        payment:
          $ref: "#/components/schemas/PaymentInformation"
        items:
          type: "array"
          description: "Items within the order"
          items:
            $ref: "#/components/schemas/OrderItem"
      description: "Order details"
    Product:
      required:
      - "allowedCoffeeTypes"
      - "basePrice"
      - "id"
      - "enabled"
      - "imageUrl"
      - "name"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          description: "Unique ID for the product"
        enabled:
          type: "boolean"
          description: "Whether this product is available for use currently"
        name:
          type: "string"
        basePrice:
          type: "number"
          description: "Price for the product without any additions"
          format: "double"
        imageUrl:
          type: "string"
          description: "URL for product image"
        allowedCoffeeTypes:
          type: "array"
          description: "Types of coffee that can be used to make this product"
          items:
            type: "string"
            description: "The type of coffee used in a drink"
            enum:
            - "REGULAR"
            - "DECAF"
        allowedMilkTypes:
          type: "array"
          description: "Types of milk that can be used to make this product, if applicable"
          items:
            type: "string"
            description: "The type of milk used in a drink"
            enum:
            - "REGULAR"
            - "SKIM"
            - "OAT"
            - "ALMOND"
        allowedAdditions:
          type: "array"
          description: "Additions that can be used to make this product, if applicable"
          items:
            $ref: "#/components/schemas/ProductAddition"
      description: "Product details, including an ID to update an existing product"
    ArrayOfDeliveryOrder:
      type: "array"
      items:
        $ref: "#/components/schemas/DeliveryOrder"
    DeliveryOrder:
      required:
      - "deliveryLocation"
      - "deliveryTime"
      - "orderStatus"
      - "id"
      - "preparedLocation"
      type: "object"
      properties:
        id:
          type: "string"
          description: "ID for the order"
        orderStatus:
          type: string
          description: Status of the order
          readOnly: true
          enum:
          - MADE
          - PICKED_UP
          - DELIVERED
        deliveryTime:
          type: "string"
          description: "Requested time for the delivery"
          format: "date-time"
        preparedLocation:
          $ref: "#/components/schemas/Location"
        deliveryLocation:
          $ref: "#/components/schemas/Location"
        deliveryFee:
          type: "number"
          description: "Payment amount to perform order delivery"
          format: "double"
        items:
          type: "array"
          description: "Items within the order"
          items:
            $ref: "#/components/schemas/OrderItem"
      description: "Information about an order for a delivery person"
    OrderRating:
      required:
      - "orderId"
      - "orderItemId"
      - "rating"
      type: "object"
      properties:
        orderId:
          type: "string"
          description: "ID of the order"
        orderItemId:
          type: "string"
          description: "Product ID of the item within the order"
        rating:
          maximum: 5
          minimum: 0
          type: "integer"
          description: "Rating on an integer scale of 0-5"
          format: "int32"
      description: "Rating for an item within an order"
    ArrayOfOrder:
      type: "array"
      items:
        $ref: "#/components/schemas/Order"
    PendingOrder:
      required:
      - "deliveryLocation"
      - "deliveryTime"
      - "orderStatus"
      - "id"
      type: "object"
      properties:
        id:
          type: "string"
          description: "ID for the order"
        orderStatus:
          type: "string"
          readOnly: true
          description: "Status of the order"
          enum:
          - "RECEIVED"
          - "BREWING"
          - "MADE"
          - "PICKED_UP"
          - "DELIVERED"
        deliveryTime:
          type: "string"
          description: "Requested delivery time for the order"
          format: "date-time"
        deliveryLocation:
          $ref: "#/components/schemas/Location"
        commission:
          type: "number"
          description: "Payment amount to prepare order"
          format: "double"
        items:
          type: "array"
          description: "Items within the order"
          items:
            $ref: "#/components/schemas/OrderItem"
      description: "Information about an order for a shop owner"
    ArrayOfOrderRating:
      type: "array"
      items:
        $ref: "#/components/schemas/OrderRating"
    OrderItem:
      required:
      - "basePrice"
      - "coffeeType"
      - "productId"
      type: "object"
      properties:
        id:
          type: "string"
          readOnly: true
          description: "Unique ID of the item within the order"
        productId:
          type: "string"
          description: "Product ID of the item"
        basePrice:
          type: "number"
          description: "Price for the product without any additions"
          format: "double"
        coffeeType:
          type: "string"
          description: "The type of coffee used in a drink"
          enum:
          - "REGULAR"
          - "DECAF"
        milkType:
          type: "string"
          description: "The type of milk used in a drink"
          enum:
          - "REGULAR"
          - "SKIM"
          - "OAT"
          - "ALMOND"
        additions:
          type: "array"
          description: "Optional additions for the item"
          items:
            $ref: "#/components/schemas/ProductAddition"
      description: "Item within an order"
    PaymentInformation:
      required:
      - "cardNumber"
      - "cvv"
      - "nameOnCard"
      type: "object"
      properties:
        nameOnCard:
          type: "string"
          description: "Name on the credit card"
        cardNumber:
          type: "string"
          description: "Full credit card number"
        cvv:
          type: "string"
          description: "Credit card's CVV"
      description: "Credit card information for payment. In a real production system,\
        \ credit card number and CVV would be secured properly (e.g., hashed) to avoid\
        \ losing customer data in a spill. For simplicity of this application, full\
        \ number and CVV are used."
    LoginInformation:
      required:
      - "username"
      type: "object"
      properties:
        username:
          type: "string"
          description: "Username for login"
    UserInformation:
      required:
      - "id"
      - "name"
      - "username"
      - "roles"
      type: "object"
      properties:
        id:
          type: "string"
          description: "System-assigned user ID"
        name:
          type: "string"
          description: "Display name"
        username:
          type: "string"
          description: "Username for login"
        roles:
          type: "string"
          description: "The roles the user has"
          enum:
          - "REGULAR_USER"
          - "ADMIN"
          - "DELIVERER"
    ErrorMessage:
      required:
      - "code"
      - "message"
      type: "object"
      properties:
        code:
          type: "integer"
          description: "Error code for debugging"
          format: "int32"
        message:
          type: "string"
          description: "Message to display to a user"
      description: "Error information"
    ArrayOfProductAddition:
      type: "array"
      items:
        $ref: "#/components/schemas/ProductAddition"
    ProductAddition:
      required:
      - "name"
      - "price"
      type: "object"
      properties:
        id:
          type: "string"
          description: "Unique ID of the addition"
        name:
          type: "string"
        price:
          type: "number"
          description: "Price to add the addition to a product"
          format: "double"
        enabled:
          type: "boolean"
          description: "Whether this addition is available for use currently"
      description: "Addition to add to a product"
    Location:
      required:
      - "city"
      - "state"
      - "streetAddress"
      - "zip"
      type: "object"
      properties:
        name:
          type: "string"
          description: "Optional name for the location"
        streetAddress:
          type: "string"
        city:
          type: "string"
        state:
          type: "string"
        zip:
          type: "string"
          description: "Zipcode"
      description: "Address information"
    ShopSettings:
      required:
      - "name"
      type: "object"
      properties:
        name:
          type: "string"
          description: "Display name for the shop"
        providesOwnDelivery:
          type: "boolean"
          description: "Whether the shop provides its own delivery"
      description: "New shop settings"
    RawImage:
      type: "string"
      format: "binary"
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "x-api-key"
      in: "header"
x-amazon-apigateway-binary-media-types:
- "image/jpg"
- "image/jpeg"
- "image/png"